spring:
  config:
    import: "optional:dotenv"

  thymeleaf:
    cache: false

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        show_sql: true
        format_sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect

  data:
    redis:
      host : ${SPRING_DATA_REDIS_HOST}
      port : ${SPRING_DATA_REDIS_PORT}

      timeout: 6000ms            # 커넥션 타임아웃 (밀리초)
      lettuce:
        shutdown-timeout: 100ms  # Lettuce 클라이언트 종료 타임아웃
        pool:
          max-active: 8          # 커넥션 최대 개수
          max-idle: 8            # 유휴 커넥션 최대 개수
          min-idle: 0            # 유휴 커넥션 최소 개수
          max-wait: 3000ms       # 커넥션 획득 최대 대기 시간

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET}
            provider: google
            authorization-grant-type: authorization_code
            redirect-uri: "${app.baseUrl}/login/oauth2/code/google"
            scope: openid, profile, email

          kakao:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KAKAO_CLIENT_SECRET}
            provider: kakao
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "${app.baseUrl}/login/oauth2/code/kakao"
            scope: profile_image, profile_nickname, account_email

          naver:
            client-id: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_ID}
            client-secret: ${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_NAVER_CLIENT_SECRET}
            provider: naver
            authorization-grant-type: authorization_code
            redirect-uri: "${app.baseUrl}/login/oauth2/code/naver"
            scope: name, email

        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            user-name-attribute: sub

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
app:
  auth:
    tokenSecret: ${APP_AUTH_TOKEN_SECRET}
    accessTokenExpirationMsec: ${APP_AUTH_ACCESS_TOKEN_EXPIRATION_MSEC}
    refreshTokenExpirationMsec: ${APP_AUTH_REFRESH_TOKEN_EXPIRATION_MSEC}
  baseUrl: http://localhost:${server.port}

server:
  port: 5050

logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type.descriptor.sql.BasicBinder: trace

springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    url: /v3/api-docs
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    display-request-duration: true

fastapi:
  chat:
    host: ${FASTAPI_HOST:localhost}
    port: ${FASTAPI_PORT:8000}
    path: /api/chat
    likes: /api/chat/likes
  ubti:
    host: ${FASTAPI_HOST:localhost}
    port: ${FASTAPI_PORT:8000}
    path:
      question: /api/ubti/question
      result:   /api/ubti/result

naver:
  cloud:
    access-key: ${NAVER_CLOUD_ACCESS_KEY}
    secret-key: ${NAVER_CLOUD_SECRET_KEY}